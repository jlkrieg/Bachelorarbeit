const Float_t f = TMath::Pi()/180.0;
double AZ = 90;

Double_t fitEl(Double_t* arg,Double_t* par){
  double el = arg[0];
  double az0 = par[0];
  double el0 = par[1];
  double az = AZ;
  double Z = sin(el*f)*cos(az0*f)*cos(el0*f)+cos(el*f)*sin(el0*f);
  return asin(Z)/f;
}

Double_t funcEl(Double_t el,Double_t az0,Double_t el0){
  double az = AZ;
  double Z = sin(el*f)*cos(az0*f)*cos(el0*f)+cos(el*f)*sin(el0*f);
  return asin(Z)/f;
}

Double_t fitAz(Double_t* arg,Double_t* par){
  double el = arg[0];
  double az = AZ;
  double az0 = par[0];
  double el0 = par[1];
  double X = +cos(az*f)*(cos(el*f)*cos(az0*f)*cos(el0*f)-sin(el*f)*sin(el0*f))-sin(az*f)*sin(az0*f)*cos(el0*f);
  double Y = -sin(az*f)*(cos(el*f)*cos(az0*f)*cos(el0*f)-sin(el*f)*sin(el0*f))-cos(az*f)*sin(az0*f)*cos(el0*f);
  return atan2(-Y,X)/f;
}

Double_t funcAz(Double_t el,Double_t az0,Double_t el0){
  double az = AZ;
  double X = +cos(az*f)*(cos(el*f)*cos(az0*f)*cos(el0*f)-sin(el*f)*sin(el0*f))-sin(az*f)*sin(az0*f)*cos(el0*f);
  double Y = -sin(az*f)*(cos(el*f)*cos(az0*f)*cos(el0*f)-sin(el*f)*sin(el0*f))-cos(az*f)*sin(az0*f)*cos(el0*f);
  return atan2(-Y,X)/f;
}


void run281fit(float _AZ=90){
  double U =0;
  double DAZ =2;
  double cutEl=35;
  AZ = _AZ;
  TNtuple*nt = (TNtuple*)gDirectory->Get("nt");
  Int_t N = nt->GetEntries();
  Float_t* a = nt->GetArgs();

  TCanvas* can = new TCanvas("can","Plots",0,0,800,600);
  TString nam("run281_az");
  nam += Int_t(AZ);
  nam += ".png";
  can->Divide(2,2);

  int k = 0;
  for(int i=0;i<N;i++){
    nt->GetEntry(i);
    Float_t u = a[0];
    //if( u == U ) continue; //evtl Hysterese
    Float_t ps = a[6];
    if( fabs(ps-11.03) > 0.05 ) continue;  
    Float_t eld = a[2];
    if( eld > cutEl ){ //grosse Ausreisser unter 10deg
      if( fabs(a[1]-AZ)<=DAZ ){
      k++;
      }
    }
  }
  const int kk=k;
  std::cout<<kk<<std::endl;
  Double_t az_vec[kk],el_vec[kk],azd_vec[kk],eld_vec[kk],daz_vec[kk],del_vec[kk],azerr[kk],elerr[kk];
  //Einlesen der Daten
  k=0;
  for(int i=0;i<N;i++){
    nt->GetEntry(i);
    Float_t u = a[0];
    //if( u == U ) continue; //evtl Hysterese
    Float_t ps = a[6];
    if( fabs(ps-11.03) > 0.05 ) continue;
    Float_t azd = a[1];    
    Float_t eld = a[2];
    if( eld > cutEl ){ //grosse Ausreisser unter 10deg
      Float_t az = a[3];
      Float_t el = a[4];
      Float_t flag = a[5];
      if( fabs(a[1]-AZ)<=DAZ ){
	azd_vec[k]=azd;
	eld_vec[k]=eld;
	az_vec[k]=az;
	el_vec[k]=el;
	k++;
      }
    }
  }
  
  //Berechnung der Fehler
  TGraph* g1fit=new TGraph(kk,eld_vec,el_vec);
  //g1fit->Sort();
  //can->cd(1);
  TF1*f1 = new TF1("fel",fitEl,0,90,2);
  g1fit->Fit("fel","","",20,90);
  Double_t az0el = g1fit->GetFunction("fel")->GetParameter(0);
  Double_t el0el = g1fit->GetFunction("fel")->GetParameter(1);
  std::cout << "el " << az0el << " " << el0el << std::endl;

  //can->cd(2);
  TGraph* g2fit=new TGraph(kk,eld_vec,az_vec);
  TF1*f2 = new TF1("faz",fitAz,0,90,2);
  g2fit->Fit("faz","","",20,90);
  Double_t az0az = g2fit->GetFunction("faz")->GetParameter(0);
  Double_t el0az = g2fit->GetFunction("faz")->GetParameter(1);
  std::cout << "az " << az0az << " " << el0az << std::endl;

  Double_t chiEl = 0;
  Double_t chiAz = 0;
  for(int i=0; i<kk; i++){
    chiEl = chiEl+pow((el_vec[i]-funcEl(eld_vec[i],az0el,el0el)),2);
    chiAz = chiAz+pow((az_vec[i]-funcAz(eld_vec[i],az0az,el0az)),2);
    std::cout<<pow((az_vec[i]-funcAz(eld_vec[i],az0el,el0el)),2)<<std::endl;
  }
  std::cout << "chi az " << chiAz << "chi el " << chiEl << std::endl;
  std::cout<<fel->GetNDF()<<std::endl;
  for(int i=0; i<kk; i++){
    elerr[i] = sqrt(chiEl/fel->GetNDF());
    azerr[i] = sqrt(chiAz/faz->GetNDF());
    std::cout<<azerr[i]<<std::endl;
  }

  //Berechnung der Differenzwerte
  for(int i=0; i<kk; i++){
    del_vec[i] = el_vec[i]-funcEl(eld_vec[i],az0el,el0el);
    daz_vec[i] = az_vec[i]-funcAz(eld_vec[i],az0az,el0az);
  }
 
  //show graphs
  can->cd(1);
  TGraphErrors* g1 = new TGraphErrors(kk,eld_vec,el_vec,0,elerr);
  TString tit1("azimuth drive = ");
  tit1 += Int_t(AZ);
  g1->SetTitle(tit1+" deg");
  g1->Draw("AP");
  g1->Fit("fel","","",20,90);
  g1->SetMarkerStyle(20);
  g1->SetMarkerSize(0.80);
  g1->GetXaxis()->SetTitle("elevation drive (deg)");
  g1->GetYaxis()->SetTitle("elevation CCD (deg)");

  can->cd(2);
  TGraphErrors* g2 = new TGraphErrors(kk,eld_vec,az_vec,0,azerr);
  TString tit2("azimuth drive = ");
  tit2 += Int_t(AZ);
  g2->SetTitle(tit2+" deg");
  g2->Draw("AP");
  g2->Fit("faz","","",20,90);
  g2->SetMarkerStyle(20);
  g2->SetMarkerSize(0.80);
  g2->GetXaxis()->SetTitle("elevation drive (deg)");
  g2->GetYaxis()->SetTitle("azimuth CCD (deg)");

  can->cd(3);
  TGraphErrors* g3 = new TGraphErrors(kk,eld_vec,del_vec,0,elerr);
  TString tit3("elevation errors = ");
  tit3 += Int_t(elerr[1]*3600);
  g3->SetTitle(tit3+" arcsec");
  g3->Draw("AP");
  g3->SetMarkerStyle(20);
  g3->SetMarkerSize(0.80);
  g3->GetXaxis()->SetTitle("elevation drive (deg)");
  g3->GetYaxis()->SetTitle("#Delta elevation CCD (deg)");
  TGraphErrors* g4 = new TGraphErrors();

  can->cd(4);
  TGraphErrors* g4 = new TGraphErrors(kk,eld_vec,daz_vec,0,azerr);
  TString tit4("azimuth errors = ");
  tit4 += Int_t(azerr[1]*3600);
  g4->SetTitle(tit4+" arcsec");
  g4->Draw("AP");
  g4->SetMarkerStyle(20);
  g4->SetMarkerSize(0.80);
  g4->GetXaxis()->SetTitle("elevation drive (deg)");
  g4->GetYaxis()->SetTitle("#Delta azimuth CCD (deg)");

can->SaveAs(nam);
}


